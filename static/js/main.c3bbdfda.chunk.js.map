{"version":3,"sources":["components /UserDetail.js","App.js","index.js"],"names":["theme","createMuiTheme","palette","main","UserDetail","state","formData","firsName","lastName","email","password","repeatPass","submitted","handleChange","event","target","name","value","form","isFormValid","setState","handleSubmit","setTimeout","ValidatorForm","addValidationRule","this","Fragment","AppBar","position","ref","r","onSubmit","label","onChange","firstName","validators","errorMessages","type","repeatPassword","Button","color","variant","disabled","onClick","continue","Component","App","className","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uTAMMA,EAAQC,YAAe,CAEzBC,QAAS,CACLC,KAAM,aA0HCC,E,4MApHXC,MAAQ,CACJC,SAAU,CACNC,SAAU,GACVC,SAAU,GACVC,MAAO,GACPC,SAAU,GACVC,WAAY,IAEhBC,WAAW,G,EAYnBC,aAAe,SAACC,GAAW,IACfR,EAAa,EAAKD,MAAlBC,SACRA,EAASQ,EAAMC,OAAOC,MAAQF,EAAMC,OAAOE,MACjB,aAAtBH,EAAMC,OAAOC,MACb,EAAKE,KAAKC,aAAY,GAE1B,EAAKC,SAAS,CAAEd,c,EAEpBe,aAAe,WACX,EAAKD,SAAS,CAACR,WAAW,IAAO,WAC7BU,YAAW,kBAAM,EAAKF,SAAS,CAACR,WAAW,MAAS,S,kEApBnC,IAAD,OAChBW,gBAAcC,kBAAkB,mBAAmB,SAACP,GAEhD,OAAIA,IADiB,EAAKZ,MAAlBC,SACeI,c,+BAsBrB,IAAD,SAE2Be,KAAKpB,MAA7BC,EAFH,EAEGA,SAAUM,EAFb,EAEaA,UAClB,OACI,kBAAC,IAAD,CAAkBZ,MAAOA,GACrB,kBAAC,IAAM0B,SAAP,KACI,kBAACC,EAAA,EAAD,CAAQC,SAAS,UACb,8CAEJ,kBAAC,gBAAD,CACIC,IAAK,SAAAC,GAAC,OAAK,EAAKZ,KAAOY,GACvBC,SAAUN,KAAKJ,cAEf,+CACA,kBAAC,gBAAD,CACIW,MAAM,OACNC,SAAUR,KAAKZ,aACfG,KAAK,YACLC,MAAOX,EAAS4B,UAChBC,WAAY,CAAC,YACbC,cAAe,CAAC,yBAA0B,6BAE9C,6BACA,kBAAC,gBAAD,CACIJ,MAAM,UACNC,SAAUR,KAAKZ,aACfG,KAAK,WACLC,MAAOX,EAASE,SAChB2B,WAAY,CAAC,YACbC,cAAe,CAAC,yBAA0B,6BAE9C,6BACA,kBAAC,gBAAD,CACIJ,MAAM,QACNC,SAAUR,KAAKZ,aACfG,KAAK,QACLC,MAAOX,EAASG,MAChB0B,WAAY,CAAC,WAAY,WACzBC,cAAe,CAAC,yBAA0B,wBAE9C,6BACA,kBAAC,gBAAD,CACIJ,MAAM,WACNC,SAAUR,KAAKZ,aACfG,KAAK,WACLqB,KAAK,WACLF,WAAY,CAAC,YACbC,cAAe,CAAC,0BAChBnB,MAAOX,EAASI,WAErB,6BACC,kBAAC,gBAAD,CACIsB,MAAM,kBACNC,SAAUR,KAAKZ,aACfG,KAAK,iBACLqB,KAAK,WACLF,WAAY,CAAC,kBAAmB,YAChCC,cAAe,CAAC,oBAAqB,0BACrCnB,MAAOX,EAASgC,iBAEpB,6BACA,6BACA,kBAACC,EAAA,EAAD,CACIC,MAAM,UACNC,QAAQ,YACRJ,KAAK,SACLK,SAAU9B,EACV+B,QAASlB,KAAKmB,UAGThC,EAAa,cACTA,GAAa,iB,GA3GzBiC,aCFVC,EARH,WACV,OACE,yBAAKC,UAAU,OACb,kBAAC,EAAD,QCDNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.c3bbdfda.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport { MuiThemeProvider,createMuiTheme } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Button from '@material-ui/core/Button' //<Button variant=\"contained\"\nimport { ValidatorForm, TextValidator } from 'react-material-ui-form-validator';\n\nconst theme = createMuiTheme({\n    /* theme for v1.x */\n    palette: {\n        main: '#ff4400'\n    },\n});\n\n\nclass UserDetail extends Component {\n    state = {\n        formData: {\n            firsName: '',\n            lastName: '',\n            email: '',\n            password: '',\n            repeatPass: ''\n        },\n        submitted: false,\n    }\n    componentDidMount() {\n        ValidatorForm.addValidationRule('isPasswordMatch', (value) => {\n            const { formData } = this.state;\n            if (value !== formData.password) {\n                return false;\n            }\n            return true;\n        });\n    }\n\nhandleChange = (event) => {\n    const { formData } = this.state;\n    formData[event.target.name] = event.target.value;\n    if (event.target.name === 'password') {\n        this.form.isFormValid(false);\n    }\n    this.setState({ formData });\n}\nhandleSubmit = () => {\n    this.setState({submitted: true}, () => {\n        setTimeout(() => this.setState({submitted: false}), 5000);\n    });\n}\n\n\n    render() {\n\n        const { formData, submitted } = this.state;\n        return (\n            <MuiThemeProvider theme={theme} >\n                <React.Fragment>\n                    <AppBar position='static'>\n                        <h1>Sign up, dude</h1>\n                    </AppBar>\n                    <ValidatorForm\n                        ref={r => (this.form = r)}\n                        onSubmit={this.handleSubmit}\n                    >\n                        <h2>Enter your info</h2>\n                        <TextValidator\n                            label=\"Name\"\n                            onChange={this.handleChange}\n                            name=\"firstName\"\n                            value={formData.firstName}\n                            validators={['required']}\n                            errorMessages={['this field is required', 'field can not be empty!']}\n                        />\n                        <br/>\n                        <TextValidator\n                            label=\"Surname\"\n                            onChange={this.handleChange}\n                            name=\"lastName\"\n                            value={formData.lastName}\n                            validators={['required']}\n                            errorMessages={['this field is required', 'field can not be empty!']}\n                        />\n                        <br/>\n                        <TextValidator\n                            label=\"Email\"\n                            onChange={this.handleChange}\n                            name=\"email\"\n                            value={formData.email}\n                            validators={['required', 'isEmail']}\n                            errorMessages={['this field is required', 'email is not valid']}\n                        />\n                        <br />\n                        <TextValidator\n                            label=\"Password\"\n                            onChange={this.handleChange}\n                            name=\"password\"\n                            type=\"password\"\n                            validators={['required']}\n                            errorMessages={['this field is required']}\n                            value={formData.password}\n                        />\n                       <br/>\n                        <TextValidator\n                            label=\"Repeat password\"\n                            onChange={this.handleChange}\n                            name=\"repeatPassword\"\n                            type=\"password\"\n                            validators={['isPasswordMatch', 'required']}\n                            errorMessages={['password mismatch', 'this field is required']}\n                            value={formData.repeatPassword}\n                        />\n                        <br/>\n                        <br/>\n                        <Button\n                            color=\"primary\"\n                            variant=\"contained\"\n                            type=\"submit\"\n                            disabled={submitted}\n                            onClick={this.continue}\n                        >\n                            {\n                                (submitted && 'Signed up!')\n                                || (!submitted && 'Submit')\n                            }\n                        </Button>\n                    </ValidatorForm>\n                </React.Fragment>\n            </MuiThemeProvider>\n        );\n    }\n}\n\nexport default UserDetail;","import React from 'react';\nimport './App.css';\nimport UserDetail from \"./components /UserDetail\";\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <UserDetail/>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n\n"],"sourceRoot":""}